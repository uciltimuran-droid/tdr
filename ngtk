--[[
    M-SAB: Steal A Brainrot Game Script (Updated)
    Features: Speed/Jump, Invisibility, Anti-Hit, Instant Steal.
    New Features: Draggable and Minimizable UI.
    Designed to be executed via a Roblox executor.
--]]

-- CORE VARIABLES
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Debris = game:GetService("Debris")

-- CONFIGURATION
local config = {
    MaxSpeed = 100, -- Maximum WalkSpeed/JumpPower setting
    DefaultSpeed = 16, -- Roblox default speed
    IsActive = false,
    TargetItemName = "Brainrot", -- Item name to look for (Case sensitive)
    -- !!! CRITICAL: REPLACE THESE COORDINATES !!!
    -- Find the Vector3 coordinates of your base's drop-off zone and enter them here.
    BaseCoords = Vector3.new(0, 50, 0),
    -- !!! END CRITICAL SECTION !!!
    Toggles = {
        SpeedJump = false,
        Invisibility = false,
        AntiHit = false,
        InstantSteal = false,
    }
}

-- STATE VARIABLES
local antiHitConnection = nil
local brainrotConnection = nil
local originalProps = {} -- Stores original character properties
local currentSpeed = config.DefaultSpeed
local isMinimized = false

-- UI DIMENSIONS
local PANEL_WIDTH = 200
local PANEL_HEIGHT_MAX = 220 -- Max height for content + title
local TITLE_BAR_HEIGHT = 30
local PANEL_HEIGHT_MIN = TITLE_BAR_HEIGHT -- Minimized height

-- UI SETUP
local gui = Instance.new("ScreenGui")
gui.Name = "MSAB_GUI"
gui.IgnoreGuiInset = true
gui.Parent = LocalPlayer:WaitForChild("PlayerGui")

-- Main Frame (Size will be adjusted on minimization)
local frame = Instance.new("Frame")
frame.Name = "ControlPanel"
frame.Size = UDim2.new(0, PANEL_WIDTH, 0, PANEL_HEIGHT_MAX)
frame.Position = UDim2.new(1, -210, 0.5, -PANEL_HEIGHT_MAX / 2) -- Top-right corner
frame.BackgroundColor3 = Color3.new(0.15, 0.15, 0.15)
frame.BorderColor3 = Color3.new(0.9, 0.9, 0.9)
frame.BorderSizePixel = 2
frame.Parent = gui

-- 1. DRAG/TITLE BAR
local titleBar = Instance.new("Frame")
titleBar.Name = "TitleBar"
titleBar.Size = UDim2.new(1, 0, 0, TITLE_BAR_HEIGHT)
titleBar.Position = UDim2.new(0, 0, 0, 0)
titleBar.BackgroundColor3 = Color3.new(0.8, 0.1, 0.1)
titleBar.Parent = frame

local titleLabel = Instance.new("TextLabel")
titleLabel.Text = "M-SAB Control Panel"
titleLabel.Size = UDim2.new(0.7, 0, 1, 0)
titleLabel.Position = UDim2.new(0.05, 0, 0, 0)
titleLabel.BackgroundColor3 = Color3.new(0.8, 0.1, 0.1)
titleLabel.TextColor3 = Color3.new(1, 1, 1)
titleLabel.Font = Enum.Font.SourceSansBold
titleLabel.TextSize = 18
titleLabel.Parent = titleBar

-- 2. MINIMIZE BUTTON
local minimizeBtn = Instance.new("TextButton")
minimizeBtn.Text = "—" -- Unicode symbol for minimize
minimizeBtn.Size = UDim2.new(0, 30, 1, 0)
minimizeBtn.Position = UDim2.new(1, -35, 0, 0)
minimizeBtn.BackgroundColor3 = Color3.new(0.6, 0.1, 0.1)
minimizeBtn.TextColor3 = Color3.new(1, 1, 1)
minimizeBtn.Font = Enum.Font.SourceSansBold
minimizeBtn.TextSize = 20
minimizeBtn.Parent = titleBar

-- 3. CONTENT FRAME (Holds all buttons, will be hidden/shown)
local contentFrame = Instance.new("Frame")
contentFrame.Name = "ContentFrame"
-- Size is dynamic, covering space below title bar
contentFrame.Size = UDim2.new(1, 0, 1, -TITLE_BAR_HEIGHT)
contentFrame.Position = UDim2.new(0, 0, 0, TITLE_BAR_HEIGHT)
contentFrame.BackgroundColor3 = Color3.new(0.15, 0.15, 0.15)
contentFrame.BorderSizePixel = 0
contentFrame.Parent = frame

local layout = Instance.new("UIListLayout")
layout.FillDirection = Enum.FillDirection.Vertical
layout.HorizontalAlignment = Enum.HorizontalAlignment.Center
layout.Padding = UDim.new(0, 5)
layout.Parent = contentFrame

local paddingFrame = Instance.new("Frame")
paddingFrame.Size = UDim2.new(1, 0, 0, 5) -- Spacer
paddingFrame.BackgroundColor3 = Color3.new(0.15, 0.15, 0.15)
paddingFrame.BorderSizePixel = 0
paddingFrame.Parent = contentFrame

-- Button creation helper
local function createButton(name, callback)
    local btn = Instance.new("TextButton")
    btn.Name = name .. "Button"
    btn.Text = name .. ": [OFF]"
    btn.Size = UDim2.new(0.9, 0, 0, 30)
    btn.BackgroundColor3 = Color3.new(0.3, 0.3, 0.3)
    btn.TextColor3 = Color3.new(1, 1, 1)
    btn.Font = Enum.Font.SourceSans
    btn.TextSize = 14
    btn.Parent = contentFrame -- IMPORTANT: Parent to contentFrame
    btn.TextXAlignment = Enum.TextXAlignment.Left
    btn.TextLabel.TextXAlignment = Enum.TextXAlignment.Left
    btn.TextLabel.Text = btn.Text

    -- Add Padding for aesthetics
    local padding = Instance.new("UIPadding")
    padding.PaddingLeft = UDim.new(0, 5)
    padding.Parent = btn

    btn.MouseButton1Click:Connect(callback)
    return btn
end

-- UI Element References (Created below)
local speedBtn, invisBtn, antiHitBtn, stealBtn, allBtn

-- DRAGGING LOGIC
local dragging = false
local dragStart = Vector2.new(0, 0)
local frameStart = UDim2.new(0, 0, 0, 0)

titleBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        frameStart = frame.Position
        titleBar.ZIndex = 2 -- Bring to front
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if dragging and (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(frameStart.X.Scale, frameStart.X.Offset + delta.X, frameStart.Y.Scale, frameStart.Y.Offset + delta.Y)
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = false
        titleBar.ZIndex = 1
    end
end)

-- MINIMIZE LOGIC
minimizeBtn.MouseButton1Click:Connect(function()
    isMinimized = not isMinimized
    contentFrame.Visible = not isMinimized
    
    if isMinimized then
        frame.Size = UDim2.new(0, PANEL_WIDTH, 0, PANEL_HEIGHT_MIN)
        minimizeBtn.Text = "+" -- Change button text to indicate expansion
    else
        frame.Size = UDim2.new(0, PANEL_WIDTH, 0, PANEL_HEIGHT_MAX)
        minimizeBtn.Text = "—" -- Change button text to indicate minimization
    end
end)


-- FUNCTION DEFINITIONS

-- Helper function to check if an object is the "brainrot"
local function isBrainrotItem(item)
    return item and (item.Name == config.TargetItemName or item:GetAttribute("IsBrainrotFlag"))
end

-- Teleports player to base if brainrot is acquired
local function checkBrainrot(child)
    if not config.Toggles.InstantSteal then return end

    if isBrainrotItem(child) then
        local character = LocalPlayer.Character
        local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")

        if humanoidRootPart then
            print("Brainrot/Flag detected! Instant delivery initiated.")
            -- Teleport to base coordinates
            humanoidRootPart.CFrame = CFrame.new(config.BaseCoords)
            -- Wait a moment for the server to register the drop-off before checking again
            task.wait(0.5)
        end
    end
end

-- Toggles Instant Steal feature
local function toggleInstantSteal(active)
    config.Toggles.InstantSteal = active
    stealBtn.Text = "Instant Steal: [" .. (active and "ON" or "OFF") .. "]"

    if brainrotConnection then
        brainrotConnection:Disconnect()
        brainrotConnection = nil
    end

    if active then
        local character = LocalPlayer.Character
        if character then
            -- Connect to monitor for the brainrot object being parented to the character
            brainrotConnection = character.ChildAdded:Connect(checkBrainrot)

            -- Check if the item is already held when toggled on
            for _, child in ipairs(character:GetChildren()) do
                if isBrainrotItem(child) then
                    checkBrainrot(child)
                    break
                end
            end
        end
    end
end

-- Toggles speed and jump power
local function toggleSpeedJump(active)
    config.Toggles.SpeedJump = active
    speedBtn.Text = "Speed/Jump: [" .. (active and "ON" or "OFF") .. "]"

    local character = LocalPlayer.Character
    local humanoid = character and character:FindFirstChildOfClass("Humanoid")

    if humanoid then
        if active then
            humanoid.WalkSpeed = config.MaxSpeed
            humanoid.JumpPower = config.MaxSpeed
            currentSpeed = config.MaxSpeed
        else
            humanoid.WalkSpeed = config.DefaultSpeed
            humanoid.JumpPower = config.DefaultSpeed
            currentSpeed = config.DefaultSpeed
        end
    end
end

-- Toggles character invisibility and anti-collision
local function toggleInvisibility(active)
    config.Toggles.Invisibility = active
    invisBtn.Text = "Invisible: [" .. (active and "ON" or "OFF") .. "]"

    local character = LocalPlayer.Character
    if not character then return end

    local function updatePart(part)
        if part:IsA("BasePart") then
            -- Store original properties before changing
            if not originalProps[part] then
                originalProps[part] = {
                    Transparency = part.Transparency,
                    CanCollide = part.CanCollide,
                }
            end

            if active then
                part.Transparency = 1
                part.CanCollide = false
            elseif originalProps[part] then
                -- Restore original properties
                part.Transparency = originalProps[part].Transparency
                part.CanCollide = originalProps[part].CanCollide
                originalProps[part] = nil
            end
        end
    end

    for _, part in ipairs(character:GetDescendants()) do
        updatePart(part)
    end

    -- Handle newly added parts (e.g., hats)
    if active then
        local connection
        connection = character.DescendantAdded:Connect(function(descendant)
            updatePart(descendant)
        end)
        Debris:AddItem(connection, 99999) -- Keep connection active indefinitely if toggled on
    end
end

-- Toggles anti-hit (constantly sets health to max)
local function toggleAntiHit(active)
    config.Toggles.AntiHit = active
    antiHitBtn.Text = "Anti Hit: [" .. (active and "ON" or "OFF") .. "]"

    if antiHitConnection then
        antiHitConnection:Disconnect()
        antiHitConnection = nil
    end

    if active then
        antiHitConnection = RunService.Stepped:Connect(function()
            local character = LocalPlayer.Character
            local humanoid = character and character:FindFirstChildOfClass("Humanoid")
            if humanoid and humanoid.Health < humanoid.MaxHealth then
                humanoid.Health = humanoid.MaxHealth
            end
        end)
    end
end

-- MASTER TOGGLE
local function toggleAll()
    config.IsActive = not config.IsActive
    allBtn.Text = "TOGGLE ALL: [" .. (config.IsActive and "ON" or "OFF") .. "]"

    toggleSpeedJump(config.IsActive)
    toggleInvisibility(config.IsActive)
    toggleAntiHit(config.IsActive)
    toggleInstantSteal(config.IsActive)
end

-- CHARACTER HANDLER
local function characterSetup(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end

    -- Reapply states if active
    if config.Toggles.SpeedJump then toggleSpeedJump(true) end
    if config.Toggles.Invisibility then toggleInvisibility(true) end
    if config.Toggles.AntiHit then toggleAntiHit(true) end
    if config.Toggles.InstantSteal then toggleInstantSteal(true) end
end

-- Connect the character handler
LocalPlayer.CharacterAdded:Connect(characterSetup)
if LocalPlayer.Character then
    characterSetup(LocalPlayer.Character)
end

-- CREATE UI ELEMENTS (AFTER FUNCTIONS ARE DEFINED)
speedBtn = createButton("Speed/Jump", function()
    toggleSpeedJump(not config.Toggles.SpeedJump)
end)

invisBtn = createButton("Invisible", function()
    toggleInvisibility(not config.Toggles.Invisibility)
end)

antiHitBtn = createButton("Anti Hit", function()
    toggleAntiHit(not config.Toggles.AntiHit)
end)

stealBtn = createButton("Instant Steal", function()
    toggleInstantSteal(not config.Toggles.InstantSteal)
end)

-- Separator
local separator = Instance.new("Frame")
separator.Size = UDim2.new(1, 0, 0, 1)
separator.BackgroundColor3 = Color3.new(0.4, 0.4, 0.4)
separator.Parent = contentFrame

-- Master Toggle Button
allBtn = Instance.new("TextButton")
allBtn.Name = "ToggleAllButton"
allBtn.Text = "TOGGLE ALL: [OFF]"
allBtn.Size = UDim2.new(0.9, 0, 0, 35)
allBtn.BackgroundColor3 = Color3.new(0.0, 0.5, 0.0) -- Green
allBtn.TextColor3 = Color3.new(1, 1, 1)
allBtn.Font = Enum.Font.SourceSansBold
allBtn.TextSize = 16
allBtn.Parent = contentFrame
allBtn.TextXAlignment = Enum.TextXAlignment.Center

local paddingAll = Instance.new("UIPadding")
paddingAll.PaddingTop = UDim.new(0, 5)
paddingAll.Parent = allBtn

allBtn.MouseButton1Click:Connect(toggleAll)

-- INITIAL UI STATE
toggleSpeedJump(false)
toggleInvisibility(false)
toggleAntiHit(false)
toggleInstantSteal(false)
toggleAll() -- Start OFF, then set state correctly based on config.IsActive
allBtn.Text = "TOGGLE ALL: [OFF]" -- Ensure it starts visually off
config.IsActive = false
